// ELECTRON MAIN PROCESS ENTRY POINT
// PURPOSE: Manages application lifecycle, window creation with responsive sizing,
// and establishes the core infrastructure for the Electron application
// SECURITY IMPACT FOR DEVELOPERS: Moderate - Determines main window behavior and
// DevTools availability; configures preload scripts that define the security boundary
// between renderer and main processes
// SECURITY IMPACT FOR APPLICATION END-USERS: Significant - Establishes the fundamental
// security posture of the application through BrowserWindow settings, affecting
// all users of the compiled application

// =====================================================================
// APPLICATION INITIALIZATION
// Electron imports, build constants, and Windows installer handling
// =====================================================================

// Import Electron modules that operate within the main process
// - app: Controls application lifecycle (startup, events, termination)
// - BrowserWindow: Creates native browser windows to display content
// - screen: Provides display metrics for responsive sizing
import { app, BrowserWindow, screen } from "electron";


// TypeScript declarations for constants injected at build time by Electron Forge
// - MAIN_WINDOW_WEBPACK_ENTRY: Path to load HTML/JS into the window via loadURL()
// - MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: Path to secure bridge script for main/renderer
// process communication
// (Magic constants auto-generated by Forge's Webpack plugin)
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Windows installation handler (Squirrel.Windows)
// - require("electron-squirrel-startup") returns true during Windows installer events
// - When true, app.quit() prevents app from running alongside installer
// - Handles events like --squirrel-install, --squirrel-updated, --squirrel-uninstall
// Critical for proper Windows shortcuts and clean installation flows
if (require("electron-squirrel-startup")) {
  app.quit();
}

// =====================================================================
// WINDOW CREATION AND SIZING
// Implements responsive window sizing based on screen dimensions
// =====================================================================

// Factory function that creates and initializes the application's main BrowserWindow
// - Calculates appropriate initial window dimensions when function is run: prefers 65% of
//   display's work area; but if minimum dimension threshold of 1024Ã—768 pixels is met will use
//   full work area when 65% display's work area would be smaller than minimum thresholds
// - Uses a privileged initialization script (preload) that runs before renderer content
//   to create a secure bridge for main process/renderer communication
// - Loads the application's complete web content (HTML, JavaScript/TypeScript, CSS)
//   using the provided path constant and always opens Chrome DevTools for debugging
// Primary window creation function - used by application event handlers in this file
const createWindow = (): void => {
  // Minimum acceptable dimensions for optimal UX
  // Prevents UI elements from being too compressed on smaller screens
  const MIN_WIDTH = 1024;  // Standard minimum width for complex UI
  const MIN_HEIGHT = 768;  // Standard minimum height for complex UI

  // Get the primary display's work area dimensions
  // Work area excludes taskbars/docks for more accurate sizing
  const primaryDisplay = screen.getPrimaryDisplay();
  const { width, height } = primaryDisplay.workAreaSize;

  // Calculate window size as 65% of screen dimensions
  // Balances screen utilization with negative space for better UX
  let windowWidth = Math.round(width * 0.65);
  let windowHeight = Math.round(height * 0.65);

  // Adaptive sizing logic for smaller displays
  // Uses full screen when calculated size would be too small
  if (windowWidth < MIN_WIDTH || windowHeight < MIN_HEIGHT) {
    windowWidth = width;    // Use full width if below minimum threshold
    windowHeight = height;  // Use full height if below minimum threshold
  }

  // Create the browser window with responsive dimensions
  // Configuration optimized for cross-platform consistency
  const mainWindow = new BrowserWindow({
    width: windowWidth,     // Dynamically calculated width
    height: windowHeight,   // Dynamically calculated height
    center: true,           // Center window on screen for better visibility
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,  // Secure preload script
      // Note: nodeIntegration defaults to false for security
    },
  });

  // Load the app's entry point HTML
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Enable DevTools for development
  // Consider making this conditional based on NODE_ENV
  mainWindow.webContents.openDevTools();
};

// =====================================================================
// APPLICATION LIFECYCLE
// Event handlers for app startup, shutdown, and OS integration
// =====================================================================

// Initialize window when Electron is ready
// This is the main entry point for window creation
app.on("ready", createWindow);

// Platform-specific window closing behavior
// Preserves macOS convention of keeping apps active when all windows close
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();  // Fully exit on non-macOS platforms
  }
  // On macOS, application stays active until explicit Cmd+Q
});

// macOS-specific dock icon behavior
// Re-creates window when dock icon is clicked and no windows exist
app.on("activate", () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();  // Restore window when app is re-activated
  }
});

// Additional main process code can be added below
// For larger applications, consider modular imports from separate files
