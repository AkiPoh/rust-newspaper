// ELECTRON MAIN PROCESS ENTRY POINT
// PURPOSE: Manages application lifecycle, window creation with fixed sizing,
// and establishes the core infrastructure for the Electron application
// SECURITY IMPACT FOR DEVELOPERS: Moderate - Determines main window behavior; and configures
// preload scripts that define the security boundary between renderer and main processes
// SECURITY IMPACT FOR APPLICATION END-USERS: Significant - Establishes the fundamental
// security posture of the application through BrowserWindow settings, affecting
// all users of the compiled application

// (ORPHAN NOTE)
// DevTools can be accessed when needed using:
// - Keyboard: Ctrl+Shift+I (Windows/Linux) or Cmd+Option+I (Mac)
// - Programmatically: mainWindow.webContents.openDevTools()
// - Menu: View > Developer > Developer Tools (when using default menu)
// (Not automatically opening DevTools on application startup provides a cleaner development
// experience and better represents the actual user experience)

// =====================================================================
// APPLICATION INITIALIZATION
// Electron imports, build constants, and Windows installer handling
// =====================================================================

// Import Electron modules that operate within the main process
// - app: Controls application lifecycle (startup, events, termination)
// - BrowserWindow: Creates native browser windows to display content
import { app, BrowserWindow } from "electron";

// TypeScript declarations for constants injected at build time by Electron Forge
// - MAIN_WINDOW_WEBPACK_ENTRY: Path to load HTML/JS into the window via loadURL()
// - MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: Path to secure bridge script for main/renderer
// process communication
// (Magic constants auto-generated by Forge's Webpack plugin)
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Windows installation handler (Squirrel.Windows)
// - require("electron-squirrel-startup") returns true during Windows installer events
// - When true, app.quit() prevents app from running alongside installer
// - Handles events like --squirrel-install, --squirrel-updated, --squirrel-uninstall
// Critical for proper Windows shortcuts and clean installation flows
if (require("electron-squirrel-startup")) {
  app.quit();
}

// =====================================================================
// WINDOW CREATION
// Creates application window
// =====================================================================

// Factory function that creates and initializes the application's main BrowserWindow
// - Creates a window with fixed (800x600px) dimensions, at the center of the display
// - Uses a privileged initialization script (preload) that runs before renderer content
//   to create a secure bridge for main process/renderer communication
// - Loads the application's complete web content (HTML, JavaScript/TypeScript, CSS)
const createWindow = (): void => {
  // Create browser window with fixed dimensions
  const mainWindow = new BrowserWindow({
    // Fixed window dimensions
    width: 800,
    height: 600,
    // Position window in center of screen
    center: true,
    // Configure security for the application's user interface
    webPreferences: {
      // Use our preload script (path provided by Electron Forge at build time)
      // This creates a secure bridge between the UI and system capabilities
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // Load the application's UI content into the mainWindow instance
  // - mainWindow is the BrowserWindow we just created above
  // - loadURL() is a BrowserWindow method that navigates the window to a URL
  // - MAIN_WINDOW_WEBPACK_ENTRY points to our compiled frontend assets
  // - This loads our src/index.html with bundled JavaScript/CSS
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
};

// =====================================================================
// APPLICATION LIFECYCLE
// Event handlers for app startup, shutdown, and OS integration
// =====================================================================

// Create window when Electron is ready to display UI
// - Process startup begins when user launches the application
// - Node.js initializes, then loads and executes this main script (index.ts)
// - As code executes, Electron begins initializing its internal modules
// - The 'ready' event fires when Electron completes this initialization
// - At that point, this handler calls createWindow() to create our UI
app.on("ready", createWindow);

// Configure application behavior when all windows are closed
// - Registers an event listener that executes whenever the last window closes
// - This distinguishes between macOS ("darwin") and other platforms (Windows/Linux)
// - Non-macOS platforms: Application fully terminates when all windows close
// - macOS: Application remains running even with no windows (follows platform convention)
// - This event handler is registered during startup but only triggers when windows close
app.on("window-all-closed", () => {
  // Exit application completely on non-macOS platforms (Windows/Linux)
  // For macOS ("darwin"), the app stays running to follow platform conventions
  if (process.platform !== "darwin") {
    app.quit();
  }
});

// Handle macOS application activation events
// - The 'activate' event fires when the app icon is clicked in the dock
//   or when the app is re-launched while already running
// - Checks if application has any open windows (getAllWindows().length)
// - Creates a new window if none exist, providing a consistent macOS experience
// - Works with 'window-all-closed' to implement standard macOS app behavior
// - This pattern enables the app to be "reactivated" from the dock
app.on("activate", () => {
  // Recreate application window if none exist when dock icon is clicked
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});
